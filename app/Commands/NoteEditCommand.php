<?php

/**
 *
 * Autogenerated with this command
 *
 * php phreak make:a phreak-cmd NoteEditCommand
 *
 */

namespace App\Commands;

use Log;
use Illuminate\Console\Scheduling\Schedule;
use LaravelZero\Framework\Commands\Command;

use App\Commands\Phreaks\TUI;
use App\Commands\Phreaks\DataPhreaks;
use App\Commands\Phreaks\FilePhreaks;

class NoteEditCommand extends Command
{
    /**
     * The signature of NoteEditCommand.
     *
     * @var string
     */
    protected $signature = 'note:edit
                            {id? : ID of the note to edit}
                            {--L|list : Display list to select from}
                            {--E|editor= : Optional. IDE/Editor to use}';
    /**
     * The description of NoteEditCommand.
     *
     * @var string
     */
    protected $description = 'Edit an existing note in your favorite editor';

    protected $help = 'Edit note by providing ID, or select from a list of existing notes.';

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $this->setHelp($this->help);

        $noteID = $this->argument("id");
        if (null !== $noteID)
            $this->openNote($noteID);
        else {
            if (false !== $this->option("list"))
                $this->selectNote();
            else
                TUI::Message("Error! You must provide an ID of a preexisting note, or request a list to select from w/ the 'L' option. Ya Dingus.", "FAIL");
        }
    }

    public function openNote($id)
    {
        $editor = "/snap/bin/micro";
        if (false !== $this->option("editor") && null !== $this->option("editor"))
            $editor = $this->option("editor");

        TUI::Break(1);
        TUI::buildFiglet("OPENING", "pagga", 80, true);
        TUI::Speaks("Please Wait", true, true);
        TUI::Break(1);
        sleep(1);

        // OPEN EDITOR
        $notePath = $this->getNotePath($id);
        TUI::Speaks($editor . " " . $notePath, true);
        system($editor . " " . $notePath . " > `tty`");
    }

    public function selectNote()
    {
        TUI::Break(2);
        TUI::Speaks("TODO! Add selectable list of all notes!");
        TUI::Break(2);
    }

    /**
     * getNotePath
     *
     * @param  int $id note identifier
     * @return string $path file location
     */
    private function getNotePath($id)
    {
        $tableName = "notes";
        $NoteData = DataPhreaks::getRowByID($tableName, intval($id));

        return $NoteData->path;
    }

    /**
     * Define the command's schedule.
     *
     * @param  \Illuminate\Console\Scheduling\Schedule $schedule
     * @return void
     */
    public function schedule(Schedule $schedule): void
    {
        // $schedule->command(static::class)->everyMinute();
    }
}
