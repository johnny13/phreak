<?php

/**
 *
 * Autogenerated with this command
 *
 * php phreak make:a phreak-cmd Menu
 *
 *
 * No sympathy for the devil; keep that in mind. Buy the ticket, take the ride...
 * and if it occasionally gets a little heavier than what you had in mind, well...
 * maybe chalk it off to forced conscious expansion:
 *      Tune in, freak out, get beaten.
 *
 *
 */

namespace App\Commands\Phreaks;

use App\Commands\Phreaks\TUI;

use PhpSchool\CliMenu\Builder\CliMenuBuilder;
use PhpSchool\CliMenu\CliMenu;
use PhpSchool\CliMenu\MenuItem\AsciiArtItem;
use PhpSchool\CliMenu\MenuStyle;
use PhpSchool\CliMenu\Input\Text;
use PhpSchool\CliMenu\Input\InputIO;

use \Dallgoot\Yaml;

use League\CLImate\CLImate;

// USED IN THUMBNAIL GENERATION.
// @todo REMOVE THIS AND USE SIMPLEIMAGE
use Intervention\Image\ImageManager;

/**
 * This PHREAK Command [MenuPhreaks] provides the backend logic and scripts.
 * Often for a front facing MenuCommand, but not always. A phreak can be
 * by itself and not have a sister command.
 */

class MenuPhreaks
{

    /**
     *
     *  GLOBAL VARIABLES
     *
     *  NAME              EXAMPLE
     *  --------------|--------------------------------
     *
     *  $climate      =>  self::$climate->out('blah');
     *  $globalWidth  =>  $x = self::$globalWidth;
     *
     */

    public $globalWidth  = 60;

    public $imagine    = "";
    public $imgManager = "";
    public $climate    = "";

    /**
     *
     * CONSTANTS
     *
     */

    const PALETTE_TEMPLATE = './resources/tables/';


    /**
     * constructStatic
     *
     * Menu static constructor
     *
     * @return void
     */
    public function __construct()
    {
        setlocale(LC_ALL, 'en_US.UTF8');

        $this->imagine    = new Imagine\Imagick\Imagine();
        $this->imgManager = new ImageManager(array('driver' => 'imagick'));
        $this->climate    = new CLImate;
    }

    public function paletteMenu()
    {
        // Displays the menu
        $mainMenu = ($builder = new CliMenuBuilder)
            ->addAsciiArt($art, AsciiArtItem::POSITION_CENTER, "  --  BLASTED  --")
            ->setTitleSeparator('nu')
            ->addSubMenu('Generate Wallpaper(s)', function (CliMenuBuilder $b) use ($wallpaperCallable, $colorCallable, $wallOptsCallable, $itemCallable) {

                global $wallpapers;

                $b->setTitle('Generate >> Wallpaper(s)')
                    ->setTitleSeparator('nu')
                    ->addLineBreak(' ')
                    ->setPadding(2, 4)
                    ->setMarginAuto()
                    ->setForegroundColour('47')
                    ->setBackgroundColour('240')
                    ->setWidth(intval($b->getTerminal()->getWidth() - 20));

                foreach ($wallpapers as $wItem) {
                    foreach ($wItem as $cat) {
                        foreach ($cat as $item) {
                            $b->addCheckboxItem($item["name"], $wallpaperCallable);
                        }
                    }
                    $b->addLineBreak(' ');
                }

                $b->addSubMenu('Next Step ->', function (CliMenuBuilder $c) use ($colorCallable, $wallOptsCallable, $itemCallable) {

                    $c->setTitle('Generate >>  Wallpaper(s) >> Palette')
                        ->setTitleSeparator('oO')
                        ->setPadding(2, 4)
                        ->setMarginAuto()
                        ->setForegroundColour('47')
                        ->setBackgroundColour('240')
                        ->setWidth(intval($c->getTerminal()->getWidth() - 20))
                        ->addLineBreak(' ')
                        ->addSubMenu('Base16 Theme', function (CliMenuBuilder $d) use ($colorCallable) {

                            $themes = loadAllBaseThemes();

                            $d->setTitle('Generate >>  Wallpaper(s) >> Palette >> Base16')
                                ->setTitleSeparator('xxX')
                                ->setPadding(2, 4)
                                ->setMarginAuto()
                                ->setForegroundColour('47')
                                ->setBackgroundColour('240')
                                ->setWidth(intval($d->getTerminal()->getWidth() - 20));

                            $d->addLineBreak(' ');

                            foreach ($themes as $theme) {
                                $name = basename($theme, ".yaml");
                                $d->addItem($name, $colorCallable);
                            }

                            $d->addLineBreak(' ');
                            $d->addLineBreak(' ');
                        })
                        ->addLineBreak(' ')
                        ->addSubMenu('Create New Theme', function (CliMenuBuilder $g) use ($itemCallable) {
                            $g->setTitle('Generate >>  Wallpaper(s) >> Palette >> New')
                                ->setTitleSeparator('mw')
                                ->setPadding(2, 4)
                                ->setMarginAuto()
                                ->setForegroundColour('47')
                                ->setBackgroundColour('240')
                                ->setWidth(intval($g->getTerminal()->getWidth() - 20));
                            $g->addLineBreak(' ');
                            $g->addStaticItem('Input up to 8 CSS value(s) + Background color. Example: #00ff5f');
                            $g->addLineBreak(' ');
                            $g->addItems([["First Color", $itemCallable], ["Second Color", $itemCallable], ["Third Color", $itemCallable], ["Fourth Color", $itemCallable], ["Fifth Color", $itemCallable], ["Sixth Color", $itemCallable], ["Seventh Color", $itemCallable], ["Eighth Color", $itemCallable]]);
                            $g->addLineBreak(' ');
                            $g->addItem("Background Color", $itemCallable);
                            $g->addLineBreak(' ');
                        })
                        ->addLineBreak(' ');
                })
                    ->addLineBreak(' ');

                $b->addSubMenu('Options', function (CliMenuBuilder $e) use ($wallOptsCallable) {
                    $e->setTitle('Generate >> Options')
                        ->setTitleSeparator('| ? | ')
                        ->setPadding(2, 4)
                        ->setMarginAuto()
                        ->setForegroundColour('47')
                        ->setBackgroundColour('240')
                        ->addLineBreak(' ')
                        ->addCheckboxItem('Shuffle theme colors?', $wallOptsCallable)
                        ->addLineBreak(' ')
                        ->addCheckboxItem('Apply a textured overlay to final result(s)?', $wallOptsCallable)
                        ->addLineBreak(' ')
                        ->addLineBreak('-');
                })
                    ->addLineBreak(' ');
            })
            ->addItem('Cleanup Wallpaper Folders', $cleanCallable, true)
            ->setItemExtra('[' . $disk_used . ']')
            ->addItem('View Created Wallpapers', $cleanCallable, true)
            ->setItemExtra('[' . $countWalls . ']')
            ->addLineBreak(' ')
            ->addItem('Build New Palette', $themeNewCallable)
            ->addItem('Edit Saved Palette', $themeEditCallable, true)
            ->setItemExtra('[' . $countThemes . ']')
            ->addLineBreak(' ')
            ->addSubMenu('Base16 Commands', function (CliMenuBuilder $h) use ($spectrumCallable, $importBase16) {
                $h->setTitle('Base16 Palette Commands')
                    ->setTitleSeparator('--=*=')
                    ->setPadding(2, 4)
                    ->setMarginAuto()
                    ->setForegroundColour('47')
                    ->setBackgroundColour('240')
                    ->addLineBreak(' ')
                    ->addItem('Generate Spectrum Images', $spectrumCallable)
                    ->addLineBreak(' ')
                    ->addItem('Download & Import All Base16 Themes', $importBase16)
                    ->addLineBreak(' ')
                    ->addLineBreak('-');
            })
            ->addLineBreak(' ')
            ->addItem('Color Explorer', $explorerCallable)
            ->addLineBreak(' ')
            ->setPadding(2, 4)
            ->setMarginAuto()
            ->setForegroundColour('47')
            ->setBackgroundColour('240')
            ->setWidth(intval($builder->getTerminal()->getWidth() - 20))
            ->build();

        $mainMenu->open();
    }

    /**
     * getAttr
     *
     * Get an Attribute
     *
     * @param  string $value
     *
     * @return string
     */
    public function getAttr($value = "")
    {
        $value = ($value !== "" ? "zero" : "one");

        return $value;
    }
}
